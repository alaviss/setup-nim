require('./sourcemap-register.js');module.exports =
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 932:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* Generated by the Nim Compiler v1.5.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1380043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194649.base = NTI1194619;
var NNI1380043 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1188015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1188044, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1188015, name: "Field2", sons: null}]};
NTI1380043.node = NNI1380043;
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
NTI1194653.base = NTI1194619;
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (false) {}
                  var code_1455199 = c_1455175.toString(16);
                  if (((code_1455199).length == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function arrayConstr(len_1480067, value_1480068, typ_1480069) {
        var result = new Array(len_1480067);
    for (var i = 0; i < len_1480067; ++i) result[i] = nimCopy(null, value_1480068, typ_1480069);
    return result;
  

  
}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    e_1420218.trace = nimCopy(null, rawWriteStackTrace_1410260(), NTI1188013);
    throw e_1420218;

  
}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
function nimMax(a_1460821, b_1460822) {
    var Tmp1;

  var result_1460823 = 0;

  BeforeRet: do {
    if ((b_1460822 <= a_1460821)) {
    Tmp1 = a_1460821;
    }
    else {
    Tmp1 = b_1460822;
    }
    
    result_1460823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460823;

}
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
function nimMin(a_1460803, b_1460804) {
    var Tmp1;

  var result_1460805 = 0;

  BeforeRet: do {
    if ((a_1460803 <= b_1460804)) {
    Tmp1 = a_1460803;
    }
    else {
    Tmp1 = b_1460804;
    }
    
    result_1460805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460805;

}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
var globalRaiseHook_1357018 = [null];
var localRaiseHook_1357023 = [null];
var outOfMemHook_1357026 = [null];
var unhandledExceptionHook_1357031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module macros",prev:framePtr,filename:"/usr/lib/nim/lib/core/macros.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
F.line = 155;
var objectID_2085031 = [0];
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module hashes",prev:framePtr,filename:"/usr/lib/nim/lib/pure/hashes.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module bitops",prev:framePtr,filename:"/usr/lib/nim/lib/pure/bitops.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module math",prev:framePtr,filename:"/usr/lib/nim/lib/pure/math.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module algorithm",prev:framePtr,filename:"/usr/lib/nim/lib/pure/algorithm.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module tables",prev:framePtr,filename:"/usr/lib/nim/lib/pure/collections/tables.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
F.line = 46;
F.line = 47;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module jsffi",prev:framePtr,filename:"/usr/lib/nim/lib/js/jsffi.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module asyncjs",prev:framePtr,filename:"/usr/lib/nim/lib/js/asyncjs.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module parseutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/parseutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module unicode",prev:framePtr,filename:"/usr/lib/nim/lib/pure/unicode.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module strutils",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module typetraits",prev:framePtr,filename:"/usr/lib/nim/lib/pure/typetraits.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module underscored_calls",prev:framePtr,filename:"/usr/lib/nim/lib/std/private/underscored_calls.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module underscored_calls",prev:framePtr,filename:"/usr/lib/nim/lib/std/private/underscored_calls.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module underscored_calls",prev:framePtr,filename:"/usr/lib/nim/lib/std/private/underscored_calls.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module underscored_calls",prev:framePtr,filename:"/usr/lib/nim/lib/std/private/underscored_calls.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module underscored_calls",prev:framePtr,filename:"/usr/lib/nim/lib/std/private/underscored_calls.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module sugar",prev:framePtr,filename:"/usr/lib/nim/lib/pure/sugar.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module utils",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/utils.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
F.line = 15;
var module_10981100 = (__webpack_require__(186));
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module core",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module exec",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/exec.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module exec",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/exec.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module exec",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/exec.nim",line:0};
framePtr = F;
F.line = 5;
var module_11001031 = (__webpack_require__(514));
framePtr = F.prev;
var F={procname:"module exec",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/exec.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module exec",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/exec.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module path",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/path.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module path",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/path.nim",line:0};
framePtr = F;
F.line = 3;
var path_11006028 = __webpack_require__(622);
framePtr = F.prev;
var F={procname:"module path",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/path.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module path",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/path.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module path",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/path.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
F.line = 7;
var fs_11036015 = __webpack_require__(747);
F.line = 8;
var os_11036016 = __webpack_require__(87);
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"/usr/lib/nim/lib/system.nim",line:0};
  framePtr = F;
    F.line = 656;
    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}  framePtr = F.prev;

  return result_1455133;

}
function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1357042(x_1357045, x_1357045_Idx, y_1357046) {
          if (x_1357045[x_1357045_Idx] === null) { x_1357045[x_1357045_Idx] = []; }
      var off = x_1357045[x_1357045_Idx].length;
      x_1357045[x_1357045_Idx].length += y_1357046.length;
      for (var i = 0; i < y_1357046.length; ++i) {
        x_1357045[x_1357045_Idx][off+i] = y_1357046.charCodeAt(i);
      }
    

  
}
function auxWriteStackTrace_1380038(f_1380040) {
          var Tmp3;

  var result_1380041 = [[]];

    var it_1380051 = f_1380040;
    var i_1380053 = 0;
    var total_1380055 = 0;
    var tempFrames_1380062 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI1380043);
    L1: do {
        L2: while (true) {
          if (!!((it_1380051 == null))) Tmp3 = false; else {            Tmp3 = (i_1380053 <= 63);          }        if (!Tmp3) break L2;
          tempFrames_1380062[i_1380053].Field0 = it_1380051.procname;
          tempFrames_1380062[i_1380053].Field1 = it_1380051.line;
          tempFrames_1380062[i_1380053].Field2 = it_1380051.filename;
          i_1380053 += 1;
          total_1380055 += 1;
          it_1380051 = it_1380051.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_1380051 == null))) break L5;
          total_1380055 += 1;
          it_1380051 = it_1380051.prev;
        }
    } while(false);
    result_1380041[0] = nimCopy(null, [], NTI1188013);
    if (!((total_1380055 == i_1380053))) {
    result_1380041[0].push.apply(result_1380041[0], makeNimstrLit("("));;
    result_1380041[0].push.apply(result_1380041[0], cstrToNimstr(((total_1380055 - i_1380053))+""));;
    result_1380041[0].push.apply(result_1380041[0], makeNimstrLit(" calls omitted) ...\x0A"));;
    }
    
    L6: do {
      var j_1395236 = 0;
      var colontmp__11265241 = 0;
      colontmp__11265241 = (i_1380053 - 1);
      var res_11265246 = colontmp__11265241;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_11265246)) break L8;
            j_1395236 = res_11265246;
            result_1380041[0].push.apply(result_1380041[0], cstrToNimstr(tempFrames_1380062[j_1395236].Field2));;
            if ((0 < tempFrames_1380062[j_1395236].Field1)) {
            result_1380041[0].push.apply(result_1380041[0], makeNimstrLit("("));;
            result_1380041[0].push.apply(result_1380041[0], cstrToNimstr((tempFrames_1380062[j_1395236].Field1)+""));;
            if (false) {}
            
            result_1380041[0].push.apply(result_1380041[0], makeNimstrLit(")"));;
            }
            
            result_1380041[0].push.apply(result_1380041[0], makeNimstrLit(" at "));;
            add_1357042(result_1380041, 0, tempFrames_1380062[j_1395236].Field0);
            result_1380041[0].push.apply(result_1380041[0], makeNimstrLit("\x0A"));;
            res_11265246 -= 1;
          }
      } while(false);
    } while(false);

  return result_1380041[0];

}
function rawWriteStackTrace_1410260() {
  var result_1410262 = [];

    if (!((framePtr == null))) {
    result_1410262 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(auxWriteStackTrace_1380038(framePtr) || []), NTI1188013);
    }
    else {
      result_1410262 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI1188013);
    }
    

  return result_1410262;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357042(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    buf_1415060[0].push.apply(buf_1415060[0], rawWriteStackTrace_1410260());;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function nsuFindChar(s_10385216, sub_10385217, start_10385218, last_10385219) {
    var Tmp1;

  var result_10385221 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1979;
    if ((last_10385219 == 0)) {
    Tmp1 = ((s_10385216).length-1);
    }
    else {
    Tmp1 = last_10385219;
    }
    
    var last_10385223 = Tmp1;
    L2: do {
      F.line = 1991;
      var i_10385606 = 0;
      F.line = 66;
      var colontmp__11265261 = 0;
      F.line = 1991;
      colontmp__11265261 = start_10385218;
      F.line = 77;
      var res_11265262 = colontmp__11265261;
      L3: do {
        F.line = 78;
          L4: while (true) {
          if (!(res_11265262 <= last_10385223)) break L4;
            F.line = 1991;
            i_10385606 = res_11265262;
            if ((sub_10385217 == s_10385216[chckIndx(i_10385606, 0, (s_10385216).length-1)])) {
            F.line = 1992;
            result_10385221 = i_10385606;
            break BeforeRet;
            }
            
            F.line = 80;
            res_11265262 = addInt(res_11265262, 1);
          }
      } while(false);
    } while(false);
    F.line = 1993;
    result_10385221 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10385221;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function substr_1571022(s_1571024, first_1571025, last_1571026) {
  var result_1571027 = [];

  var F={procname:"system.substr",prev:framePtr,filename:"/usr/lib/nim/lib/system.nim",line:0};
  framePtr = F;
    F.line = 3002;
    var first_1571028 = nimMax(first_1571025, 0);
    F.line = 3003;
    var L_1571030 = nimMax(addInt(subInt(nimMin(last_1571026, ((s_1571024).length-1)), first_1571028), 1), 0);
    F.line = 3004;
    result_1571027 = nimCopy(null, mnewString(chckRange(L_1571030, 0, 2147483647)), NTI1188013);
    L1: do {
      F.line = 3005;
      var i_1571039 = 0;
      F.line = 66;
      var colontmp__11265270 = 0;
      F.line = 3005;
      colontmp__11265270 = subInt(L_1571030, 1);
      F.line = 77;
      var res_11265271 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_11265271 <= colontmp__11265270)) break L3;
            F.line = 3005;
            i_1571039 = res_11265271;
            F.line = 3006;
            result_1571027[chckIndx(i_1571039, 0, (result_1571027).length-1)] = s_1571024[chckIndx(addInt(i_1571039, first_1571028), 0, (s_1571024).length-1)];
            F.line = 80;
            res_11265271 = addInt(res_11265271, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_1571027;

}
function substr_1571053(s_1571055, first_1571056) {
  var result_1571058 = [];

  var F={procname:"system.substr",prev:framePtr,filename:"/usr/lib/nim/lib/system.nim",line:0};
  framePtr = F;
    F.line = 3009;
    result_1571058 = nimCopy(null, substr_1571022(s_1571055, first_1571056, ((s_1571055).length-1)), NTI1188013);
  framePtr = F.prev;

  return result_1571058;

}
function nsuInitSkipTable(a_10380081, sub_10380082) {
  var F={procname:"strutils.initSkipTable",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
  framePtr = F;
    F.line = 1915;
    var m_10380083 = (sub_10380082).length;
    F.line = 1916;
    var i_10380085 = 0;
    L1: do {
      F.line = 1917;
        L2: while (true) {
        if (!(i_10380085 <= 248)) break L2;
          F.line = 1918;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 0), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1919;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 1), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1920;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 2), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1921;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 3), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1922;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 4), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1923;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 5), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1924;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 6), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1925;
          a_10380081[chckIndx(chckRange(addInt(i_10380085, 7), 0, 255), 0, (a_10380081).length-1)] = m_10380083;
          F.line = 1926;
          i_10380085 = addInt(i_10380085, 8);
        }
    } while(false);
    L3: do {
      F.line = 1928;
      var i_10380101 = 0;
      F.line = 104;
      var colontmp__11265278 = 0;
      F.line = 1928;
      colontmp__11265278 = subInt(m_10380083, 1);
      F.line = 106;
      var i_11265279 = 0;
      L4: do {
        F.line = 107;
          L5: while (true) {
          if (!(i_11265279 < colontmp__11265278)) break L5;
            F.line = 1928;
            i_10380101 = i_11265279;
            F.line = 1929;
            a_10380081[chckIndx(sub_10380082[chckIndx(i_10380101, 0, (sub_10380082).length-1)], 0, (a_10380081).length-1)] = subInt(subInt(m_10380083, 1), i_10380101);
            F.line = 109;
            i_11265279 = addInt(i_11265279, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  
}
function nsuFindStrA(a_10380117, s_10380118, sub_10380119, start_10380120, last_10380121) {
    var Tmp1;

  var result_10380123 = 0;

  var F={procname:"strutils.find",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 1939;
    if ((last_10380121 == 0)) {
    Tmp1 = ((s_10380118).length-1);
    }
    else {
    Tmp1 = last_10380121;
    }
    
    var last_10380125 = Tmp1;
    F.line = 1940;
    var subLast_10380126 = subInt((sub_10380119).length, 1);
    if ((subLast_10380126 == -1)) {
    F.line = 1945;
    result_10380123 = start_10380120;
    break BeforeRet;
    }
    
    F.line = 1949;
    var skip_10380127 = start_10380120;
    L2: do {
      F.line = 1951;
        L3: while (true) {
        if (!(subLast_10380126 <= subInt(last_10380125, skip_10380127))) break L3;
          F.line = 1952;
          var i_10385001 = subLast_10380126;
          L4: do {
            F.line = 1953;
              L5: while (true) {
              if (!(s_10380118[chckIndx(addInt(skip_10380127, i_10385001), 0, (s_10380118).length-1)] == sub_10380119[chckIndx(i_10385001, 0, (sub_10380119).length-1)])) break L5;
                if ((i_10385001 == 0)) {
                F.line = 1955;
                result_10380123 = skip_10380127;
                break BeforeRet;
                }
                
                F.line = 1956;
                i_10385001 = subInt(i_10385001, 1);
              }
          } while(false);
          F.line = 1957;
          skip_10380127 = addInt(skip_10380127, a_10380117[chckIndx(s_10380118[chckIndx(addInt(skip_10380127, subLast_10380126), 0, (s_10380118).length-1)], 0, (a_10380117).length-1)]);
        }
    } while(false);
    F.line = 1958;
    result_10380123 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_10380123;

}
function nsuReplaceStr(s_10455016, sub_10455017, by_10455018) {
  var result_10455019 = [];

  var F={procname:"strutils.replace",prev:framePtr,filename:"/usr/lib/nim/lib/pure/strutils.nim",line:0};
  framePtr = F;
    F.line = 2184;
    result_10455019 = nimCopy(null, [], NTI1188013);
    F.line = 2185;
    var subLen_10455020 = (sub_10455017).length;
    if ((subLen_10455020 == 0)) {
    F.line = 2187;
    result_10455019 = nimCopy(null, s_10455016, NTI1188013);
    }
    else {
    if ((subLen_10455020 == 1)) {
    F.line = 2191;
    var c_10455021 = sub_10455017[chckIndx(0, 0, (sub_10455017).length-1)];
    F.line = 2192;
    var last_10455023 = ((s_10455016).length-1);
    F.line = 2193;
    var i_10455025 = 0;
    L1: do {
      F.line = 2194;
        L2: while (true) {
        if (false) {}
          F.line = 2195;
          var j_10455026 = nsuFindChar(s_10455016, c_10455021, chckRange(i_10455025, 0, 2147483647), last_10455023);
          if ((j_10455026 < 0)) {
          F.line = 2196;
          break L1;
          }
          
          F.line = 2197;
          result_10455019.push.apply(result_10455019, substr_1571022(s_10455016, i_10455025, subInt(j_10455026, 1)));;
          F.line = 2198;
          result_10455019.push.apply(result_10455019, by_10455018);;
          F.line = 2199;
          i_10455025 = addInt(j_10455026, subLen_10455020);
        }
    } while(false);
    F.line = 2201;
    result_10455019.push.apply(result_10455019, substr_1571053(s_10455016, i_10455025));;
    }
    else {
      F.line = 2203;
      var a_10455027 = [new Int32Array(256)];
      F.line = 2204;
      nsuInitSkipTable(a_10455027[0], sub_10455017);
      F.line = 2205;
      var last_10455030 = ((s_10455016).length-1);
      F.line = 2206;
      var i_10455032 = 0;
      L3: do {
        F.line = 2207;
          L4: while (true) {
          if (false) {}
            F.line = 2208;
            var j_10455033 = nsuFindStrA(a_10455027[0], s_10455016, sub_10455017, chckRange(i_10455032, 0, 2147483647), last_10455030);
            if ((j_10455033 < 0)) {
            F.line = 2209;
            break L3;
            }
            
            F.line = 2210;
            result_10455019.push.apply(result_10455019, substr_1571022(s_10455016, i_10455032, subInt(j_10455033, 1)));;
            F.line = 2211;
            result_10455019.push.apply(result_10455019, by_10455018);;
            F.line = 2212;
            i_10455032 = addInt(j_10455033, subLen_10455020);
          }
      } while(false);
      F.line = 2214;
      result_10455019.push.apply(result_10455019, substr_1571053(s_10455016, i_10455032));;
    }
    }
  framePtr = F.prev;

  return result_10455019;

}
function addMatcher_10985151(file_10985153) {
  var F={procname:"core.addMatcher",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/private/actions/core.nim",line:0};
  framePtr = F;
    console.log((("::add-matcher::" + file_10985153)));
  framePtr = F.prev;

  
}
async function main_11040001() {
  var result_11040007 = null;

  var F={procname:"setup_nim.main",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 20;
    var path_11060011 = (fs_11036015.realpathSync((module_10981100.getInput("path"))));
    F.line = 34;
    var nHEX60gensym8_11065001 = makeNimstrLit("Download the compiler");
    F.line = 21;
    try {
    F.line = 36;
    module_10981100.startGroup(toJSStr(nHEX60gensym8_11065001));
    F.line = 22;
    var exitCode_11115012 = (await module_11001031.exec(toJSStr([34].concat(nsuReplaceStr(cstrToNimstr((__webpack_require__.ab + "setup.sh")), makeNimstrLit("\""), makeNimstrLit("\"")) || [])), ["-o", path_11060011, module_10981100.getInput("version", {required: true})]));
    if (!((exitCode_11115012 == 0))) {
    F.line = 24;
    module_10981100.error("Download failed");
    F.line = 79;
    result_11040007 = undefined;
    break BeforeRet;
    }
    
    } finally {
    framePtr = F;
    F.line = 39;
    module_10981100.endGroup(toJSStr(nHEX60gensym8_11065001));
    }
    F.line = 26;
    module_10981100.info("Adding annotations");
    F.line = 27;
    addMatcher_10985151((__webpack_require__.ab + "nim.json"));
    if ((module_10981100.getInput("add-to-path") == "true")) {
    F.line = 29;
    module_10981100.info("Adding compiler to PATH");
    F.line = 15;
    var pHEX60gensym32_11195001 = path_11060011;
    F.line = 16;
    module_10981100.info((("Adding '" + pHEX60gensym32_11195001) + "' to PATH"));
    F.line = 17;
    module_10981100.addPath(path_11060011);
    F.line = 15;
    var pHEX60gensym43_11255001 = (path_11006028.join(((os_11036016.homedir())), (".nimble"), ("bin")));
    F.line = 16;
    module_10981100.info((("Adding '" + pHEX60gensym43_11255001) + "' to PATH"));
    F.line = 17;
    module_10981100.addPath((path_11006028.join(((os_11036016.homedir())), (".nimble"), ("bin"))));
    }
    
    F.line = 131;
    result_11040007 = undefined;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11040007;

}
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
F.line = 34;
main_11040001();
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;
var F={procname:"module setup_nim",prev:framePtr,filename:"/home/leorize/source/setup-nim-env/src/setup_nim.nim",line:0};
framePtr = F;
framePtr = F.prev;


/***/ }),

/***/ 351:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const os = __importStar(__webpack_require__(87));
const utils_1 = __webpack_require__(278);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 186:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const command_1 = __webpack_require__(351);
const file_command_1 = __webpack_require__(717);
const utils_1 = __webpack_require__(278);
const os = __importStar(__webpack_require__(87));
const path = __importStar(__webpack_require__(622));
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        const delimiter = '_GitHubActionsFileCommandDelimeter_';
        const commandValue = `${name}<<${delimiter}${os.EOL}${convertedVal}${os.EOL}${delimiter}`;
        file_command_1.issueCommand('ENV', commandValue);
    }
    else {
        command_1.issueCommand('set-env', { name }, convertedVal);
    }
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.  The value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    command_1.issueCommand('set-output', { name }, value);
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 */
function error(message) {
    command_1.issue('error', message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds an warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 */
function warning(message) {
    command_1.issue('warning', message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    command_1.issueCommand('save-state', { name }, value);
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 717:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// For internal use, subject to change.
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__webpack_require__(747));
const os = __importStar(__webpack_require__(87));
const utils_1 = __webpack_require__(278);
function issueCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueCommand = issueCommand;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 278:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 514:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const tr = __importStar(__webpack_require__(159));
/**
 * Exec a command.
 * Output will be streamed to the live console.
 * Returns promise with return code
 *
 * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
 * @param     args               optional arguments for tool. Escaping is handled by the lib.
 * @param     options            optional exec options.  See ExecOptions
 * @returns   Promise<number>    exit code
 */
function exec(commandLine, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        // Path to tool to execute should be first arg
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
    });
}
exports.exec = exec;
//# sourceMappingURL=exec.js.map

/***/ }),

/***/ 159:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const os = __importStar(__webpack_require__(87));
const events = __importStar(__webpack_require__(614));
const child = __importStar(__webpack_require__(129));
const path = __importStar(__webpack_require__(622));
const io = __importStar(__webpack_require__(436));
const ioUtil = __importStar(__webpack_require__(962));
/* eslint-disable @typescript-eslint/unbound-method */
const IS_WINDOWS = process.platform === 'win32';
/*
 * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.
 */
class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
            throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
    }
    _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
            this.options.listeners.debug(message);
        }
    }
    _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool
        if (IS_WINDOWS) {
            // Windows + cmd file
            if (this._isCmdFile()) {
                cmd += toolPath;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows + verbatim
            else if (options.windowsVerbatimArguments) {
                cmd += `"${toolPath}"`;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows (regular)
            else {
                cmd += this._windowsQuoteCmdArg(toolPath);
                for (const a of args) {
                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;
                }
            }
        }
        else {
            // OSX/Linux - this can likely be improved with some form of quoting.
            // creating processes on Unix is fundamentally different than Windows.
            // on Unix, execvp() takes an arg array.
            cmd += toolPath;
            for (const a of args) {
                cmd += ` ${a}`;
            }
        }
        return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
        try {
            let s = strBuffer + data.toString();
            let n = s.indexOf(os.EOL);
            while (n > -1) {
                const line = s.substring(0, n);
                onLine(line);
                // the rest of the string ...
                s = s.substring(n + os.EOL.length);
                n = s.indexOf(os.EOL);
            }
            strBuffer = s;
        }
        catch (err) {
            // streaming lines to console is best effort.  Don't fail a build.
            this._debug(`error processing line. Failed with error ${err}`);
        }
    }
    _getSpawnFileName() {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                return process.env['COMSPEC'] || 'cmd.exe';
            }
        }
        return this.toolPath;
    }
    _getSpawnArgs(options) {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
                for (const a of this.args) {
                    argline += ' ';
                    argline += options.windowsVerbatimArguments
                        ? a
                        : this._windowsQuoteCmdArg(a);
                }
                argline += '"';
                return [argline];
            }
        }
        return this.args;
    }
    _endsWith(str, end) {
        return str.endsWith(end);
    }
    _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return (this._endsWith(upperToolPath, '.CMD') ||
            this._endsWith(upperToolPath, '.BAT'));
    }
    _windowsQuoteCmdArg(arg) {
        // for .exe, apply the normal quoting rules that libuv applies
        if (!this._isCmdFile()) {
            return this._uvQuoteCmdArg(arg);
        }
        // otherwise apply quoting rules specific to the cmd.exe command line parser.
        // the libuv rules are generic and are not designed specifically for cmd.exe
        // command line parser.
        //
        // for a detailed description of the cmd.exe command line parser, refer to
        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912
        // need quotes for empty arg
        if (!arg) {
            return '""';
        }
        // determine whether the arg needs to be quoted
        const cmdSpecialChars = [
            ' ',
            '\t',
            '&',
            '(',
            ')',
            '[',
            ']',
            '{',
            '}',
            '^',
            '=',
            ';',
            '!',
            "'",
            '+',
            ',',
            '`',
            '~',
            '|',
            '<',
            '>',
            '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
            if (cmdSpecialChars.some(x => x === char)) {
                needsQuotes = true;
                break;
            }
        }
        // short-circuit if quotes not needed
        if (!needsQuotes) {
            return arg;
        }
        // the following quoting rules are very similar to the rules that by libuv applies.
        //
        // 1) wrap the string in quotes
        //
        // 2) double-up quotes - i.e. " => ""
        //
        //    this is different from the libuv quoting rules. libuv replaces " with \", which unfortunately
        //    doesn't work well with a cmd.exe command line.
        //
        //    note, replacing " with "" also works well if the arg is passed to a downstream .NET console app.
        //    for example, the command line:
        //          foo.exe "myarg:""my val"""
        //    is parsed by a .NET console app into an arg array:
        //          [ "myarg:\"my val\"" ]
        //    which is the same end result when applying libuv quoting rules. although the actual
        //    command line from libuv quoting rules would look like:
        //          foo.exe "myarg:\"my val\""
        //
        // 3) double-up slashes that precede a quote,
        //    e.g.  hello \world    => "hello \world"
        //          hello\"world    => "hello\\""world"
        //          hello\\"world   => "hello\\\\""world"
        //          hello world\    => "hello world\\"
        //
        //    technically this is not required for a cmd.exe command line, or the batch argument parser.
        //    the reasons for including this as a .cmd quoting rule are:
        //
        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an
        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.
        //
        //    b) it's what we've been doing previously (by deferring to node default behavior) and we
        //       haven't heard any complaints about that aspect.
        //
        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be
        // escaped when used on the command line directly - even though within a .cmd file % can be escaped
        // by using %%.
        //
        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts
        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.
        //
        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would
        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the
        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args
        // to an external program.
        //
        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.
        // % can be escaped within a .cmd file.
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\'; // double the slash
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '"'; // double the quote
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _uvQuoteCmdArg(arg) {
        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as
        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments
        // is used.
        //
        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,
        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),
        // pasting copyright notice from Node within this function:
        //
        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.
        //
        //      Permission is hereby granted, free of charge, to any person obtaining a copy
        //      of this software and associated documentation files (the "Software"), to
        //      deal in the Software without restriction, including without limitation the
        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        //      sell copies of the Software, and to permit persons to whom the Software is
        //      furnished to do so, subject to the following conditions:
        //
        //      The above copyright notice and this permission notice shall be included in
        //      all copies or substantial portions of the Software.
        //
        //      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
        //      IN THE SOFTWARE.
        if (!arg) {
            // Need double quotation for empty argument
            return '""';
        }
        if (!arg.includes(' ') && !arg.includes('\t') && !arg.includes('"')) {
            // No quotation needed
            return arg;
        }
        if (!arg.includes('"') && !arg.includes('\\')) {
            // No embedded double quotes or backslashes, so I can just wrap
            // quote marks around the whole thing.
            return `"${arg}"`;
        }
        // Expected input/output:
        //   input : hello"world
        //   output: "hello\"world"
        //   input : hello""world
        //   output: "hello\"\"world"
        //   input : hello\world
        //   output: hello\world
        //   input : hello\\world
        //   output: hello\\world
        //   input : hello\"world
        //   output: "hello\\\"world"
        //   input : hello\\"world
        //   output: "hello\\\\\"world"
        //   input : hello world\
        //   output: "hello world\\" - note the comment in libuv actually reads "hello world\"
        //                             but it appears the comment is wrong, it should be "hello world\\"
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\';
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '\\';
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _cloneExecOptions(options) {
        options = options || {};
        const result = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            windowsVerbatimArguments: options.windowsVerbatimArguments || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false,
            delay: options.delay || 10000
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
    }
    _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result['windowsVerbatimArguments'] =
            options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
            result.argv0 = `"${toolPath}"`;
        }
        return result;
    }
    /**
     * Exec a tool.
     * Output will be streamed to the live console.
     * Returns promise with return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optional exec options.  See ExecOptions
     * @returns   number
     */
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            // root the tool path if it is unrooted and contains relative pathing
            if (!ioUtil.isRooted(this.toolPath) &&
                (this.toolPath.includes('/') ||
                    (IS_WINDOWS && this.toolPath.includes('\\')))) {
                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted
                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
            }
            // if the tool is only a file name, then resolve it from the PATH
            // otherwise verify it exists (add extension on Windows if necessary)
            this.toolPath = yield io.which(this.toolPath, true);
            return new Promise((resolve, reject) => {
                this._debug(`exec tool: ${this.toolPath}`);
                this._debug('arguments:');
                for (const arg of this.args) {
                    this._debug(`   ${arg}`);
                }
                const optionsNonNull = this._cloneExecOptions(this.options);
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
                }
                const state = new ExecState(optionsNonNull, this.toolPath);
                state.on('debug', (message) => {
                    this._debug(message);
                });
                const fileName = this._getSpawnFileName();
                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
                const stdbuffer = '';
                if (cp.stdout) {
                    cp.stdout.on('data', (data) => {
                        if (this.options.listeners && this.options.listeners.stdout) {
                            this.options.listeners.stdout(data);
                        }
                        if (!optionsNonNull.silent && optionsNonNull.outStream) {
                            optionsNonNull.outStream.write(data);
                        }
                        this._processLineBuffer(data, stdbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.stdline) {
                                this.options.listeners.stdline(line);
                            }
                        });
                    });
                }
                const errbuffer = '';
                if (cp.stderr) {
                    cp.stderr.on('data', (data) => {
                        state.processStderr = true;
                        if (this.options.listeners && this.options.listeners.stderr) {
                            this.options.listeners.stderr(data);
                        }
                        if (!optionsNonNull.silent &&
                            optionsNonNull.errStream &&
                            optionsNonNull.outStream) {
                            const s = optionsNonNull.failOnStdErr
                                ? optionsNonNull.errStream
                                : optionsNonNull.outStream;
                            s.write(data);
                        }
                        this._processLineBuffer(data, errbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.errline) {
                                this.options.listeners.errline(line);
                            }
                        });
                    });
                }
                cp.on('error', (err) => {
                    state.processError = err.message;
                    state.processExited = true;
                    state.processClosed = true;
                    state.CheckComplete();
                });
                cp.on('exit', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                cp.on('close', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    state.processClosed = true;
                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                state.on('done', (error, exitCode) => {
                    if (stdbuffer.length > 0) {
                        this.emit('stdline', stdbuffer);
                    }
                    if (errbuffer.length > 0) {
                        this.emit('errline', errbuffer);
                    }
                    cp.removeAllListeners();
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(exitCode);
                    }
                });
                if (this.options.input) {
                    if (!cp.stdin) {
                        throw new Error('child process missing stdin');
                    }
                    cp.stdin.end(this.options.input);
                }
            });
        });
    }
}
exports.ToolRunner = ToolRunner;
/**
 * Convert an arg string to an array of args. Handles escaping
 *
 * @param    argString   string of arguments
 * @returns  string[]    array of arguments
 */
function argStringToArray(argString) {
    const args = [];
    let inQuotes = false;
    let escaped = false;
    let arg = '';
    function append(c) {
        // we only escape double quotes.
        if (escaped && c !== '"') {
            arg += '\\';
        }
        arg += c;
        escaped = false;
    }
    for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
            if (!escaped) {
                inQuotes = !inQuotes;
            }
            else {
                append(c);
            }
            continue;
        }
        if (c === '\\' && escaped) {
            append(c);
            continue;
        }
        if (c === '\\' && inQuotes) {
            escaped = true;
            continue;
        }
        if (c === ' ' && !inQuotes) {
            if (arg.length > 0) {
                args.push(arg);
                arg = '';
            }
            continue;
        }
        append(c);
    }
    if (arg.length > 0) {
        args.push(arg.trim());
    }
    return args;
}
exports.argStringToArray = argStringToArray;
class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
        super();
        this.processClosed = false; // tracks whether the process has exited and stdio is closed
        this.processError = '';
        this.processExitCode = 0;
        this.processExited = false; // tracks whether the process has exited
        this.processStderr = false; // tracks whether stderr was written to
        this.delay = 10000; // 10 seconds
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
            throw new Error('toolPath must not be empty');
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
            this.delay = options.delay;
        }
    }
    CheckComplete() {
        if (this.done) {
            return;
        }
        if (this.processClosed) {
            this._setResult();
        }
        else if (this.processExited) {
            this.timeout = setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
    }
    _debug(message) {
        this.emit('debug', message);
    }
    _setResult() {
        // determine whether there is an error
        let error;
        if (this.processExited) {
            if (this.processError) {
                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
            }
            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
            }
            else if (this.processStderr && this.options.failOnStdErr) {
                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
            }
        }
        // clear the timeout
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.done = true;
        this.emit('done', error, this.processExitCode);
    }
    static HandleTimeout(state) {
        if (state.done) {
            return;
        }
        if (!state.processClosed && state.processExited) {
            const message = `The STDIO streams did not close within ${state.delay /
                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
            state._debug(message);
        }
        state._setResult();
    }
}
//# sourceMappingURL=toolrunner.js.map

/***/ }),

/***/ 962:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
const assert_1 = __webpack_require__(357);
const fs = __webpack_require__(747);
const path = __webpack_require__(622);
_a = fs.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
exports.IS_WINDOWS = process.platform === 'win32';
function exists(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield exports.stat(fsPath);
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return false;
            }
            throw err;
        }
        return true;
    });
}
exports.exists = exists;
function isDirectory(fsPath, useStat = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
    });
}
exports.isDirectory = isDirectory;
/**
 * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
 * \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
 */
function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
        return (p.startsWith('\\') || /^[A-Z]:/i.test(p) // e.g. \ or \hello or \\hello
        ); // e.g. C: or C:\hello
    }
    return p.startsWith('/');
}
exports.isRooted = isRooted;
/**
 * Recursively create a directory at `fsPath`.
 *
 * This implementation is optimistic, meaning it attempts to create the full
 * path first, and backs up the path stack from there.
 *
 * @param fsPath The path to create
 * @param maxDepth The maximum recursion depth
 * @param depth The current recursion depth
 */
function mkdirP(fsPath, maxDepth = 1000, depth = 1) {
    return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, 'a path argument must be provided');
        fsPath = path.resolve(fsPath);
        if (depth >= maxDepth)
            return exports.mkdir(fsPath);
        try {
            yield exports.mkdir(fsPath);
            return;
        }
        catch (err) {
            switch (err.code) {
                case 'ENOENT': {
                    yield mkdirP(path.dirname(fsPath), maxDepth, depth + 1);
                    yield exports.mkdir(fsPath);
                    return;
                }
                default: {
                    let stats;
                    try {
                        stats = yield exports.stat(fsPath);
                    }
                    catch (err2) {
                        throw err;
                    }
                    if (!stats.isDirectory())
                        throw err;
                }
            }
        }
    });
}
exports.mkdirP = mkdirP;
/**
 * Best effort attempt to determine whether a file exists and is executable.
 * @param filePath    file path to check
 * @param extensions  additional file extensions to try
 * @return if file exists and is executable, returns the file path. otherwise empty string.
 */
function tryGetExecutablePath(filePath, extensions) {
    return __awaiter(this, void 0, void 0, function* () {
        let stats = undefined;
        try {
            // test file exists
            stats = yield exports.stat(filePath);
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                // eslint-disable-next-line no-console
                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
        }
        if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
                // on Windows, test for valid extension
                const upperExt = path.extname(filePath).toUpperCase();
                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {
                    return filePath;
                }
            }
            else {
                if (isUnixExecutable(stats)) {
                    return filePath;
                }
            }
        }
        // try each extension
        const originalFilePath = filePath;
        for (const extension of extensions) {
            filePath = originalFilePath + extension;
            stats = undefined;
            try {
                stats = yield exports.stat(filePath);
            }
            catch (err) {
                if (err.code !== 'ENOENT') {
                    // eslint-disable-next-line no-console
                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
                }
            }
            if (stats && stats.isFile()) {
                if (exports.IS_WINDOWS) {
                    // preserve the case of the actual file (since an extension was appended)
                    try {
                        const directory = path.dirname(filePath);
                        const upperName = path.basename(filePath).toUpperCase();
                        for (const actualName of yield exports.readdir(directory)) {
                            if (upperName === actualName.toUpperCase()) {
                                filePath = path.join(directory, actualName);
                                break;
                            }
                        }
                    }
                    catch (err) {
                        // eslint-disable-next-line no-console
                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
                    }
                    return filePath;
                }
                else {
                    if (isUnixExecutable(stats)) {
                        return filePath;
                    }
                }
            }
        }
        return '';
    });
}
exports.tryGetExecutablePath = tryGetExecutablePath;
function normalizeSeparators(p) {
    p = p || '';
    if (exports.IS_WINDOWS) {
        // convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // remove redundant slashes
        return p.replace(/\\\\+/g, '\\');
    }
    // remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
// on Mac/Linux, test the execute bit
//     R   W  X  R  W X R W X
//   256 128 64 32 16 8 4 2 1
function isUnixExecutable(stats) {
    return ((stats.mode & 1) > 0 ||
        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));
}
//# sourceMappingURL=io-util.js.map

/***/ }),

/***/ 436:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const childProcess = __webpack_require__(129);
const path = __webpack_require__(622);
const util_1 = __webpack_require__(669);
const ioUtil = __webpack_require__(962);
const exec = util_1.promisify(childProcess.exec);
/**
 * Copies a file or folder.
 * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See CopyOptions.
 */
function cp(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        // Dest is an existing file, but not forcing
        if (destStat && destStat.isFile() && !force) {
            return;
        }
        // If dest is an existing directory, should copy inside.
        const newDest = destStat && destStat.isDirectory()
            ? path.join(dest, path.basename(source))
            : dest;
        if (!(yield ioUtil.exists(source))) {
            throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
            if (!recursive) {
                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
            }
            else {
                yield cpDirRecursive(source, newDest, 0, force);
            }
        }
        else {
            if (path.relative(source, newDest) === '') {
                // a file cannot be copied to itself
                throw new Error(`'${newDest}' and '${source}' are the same file`);
            }
            yield copyFile(source, newDest, force);
        }
    });
}
exports.cp = cp;
/**
 * Moves a path.
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See MoveOptions.
 */
function mv(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
            let destExists = true;
            if (yield ioUtil.isDirectory(dest)) {
                // If dest is directory copy src into dest
                dest = path.join(dest, path.basename(source));
                destExists = yield ioUtil.exists(dest);
            }
            if (destExists) {
                if (options.force == null || options.force) {
                    yield rmRF(dest);
                }
                else {
                    throw new Error('Destination already exists');
                }
            }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
    });
}
exports.mv = mv;
/**
 * Remove a path recursively with force
 *
 * @param inputPath path to remove
 */
function rmRF(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
            // Node doesn't provide a delete operation, only an unlink function. This means that if the file is being used by another
            // program (e.g. antivirus), it won't be deleted. To address this, we shell out the work to rd/del.
            try {
                if (yield ioUtil.isDirectory(inputPath, true)) {
                    yield exec(`rd /s /q "${inputPath}"`);
                }
                else {
                    yield exec(`del /f /a "${inputPath}"`);
                }
            }
            catch (err) {
                // if you try to delete a file that doesn't exist, desired result is achieved
                // other errors are valid
                if (err.code !== 'ENOENT')
                    throw err;
            }
            // Shelling out fails to remove a symlink folder with missing source, this unlink catches that
            try {
                yield ioUtil.unlink(inputPath);
            }
            catch (err) {
                // if you try to delete a file that doesn't exist, desired result is achieved
                // other errors are valid
                if (err.code !== 'ENOENT')
                    throw err;
            }
        }
        else {
            let isDir = false;
            try {
                isDir = yield ioUtil.isDirectory(inputPath);
            }
            catch (err) {
                // if you try to delete a file that doesn't exist, desired result is achieved
                // other errors are valid
                if (err.code !== 'ENOENT')
                    throw err;
                return;
            }
            if (isDir) {
                yield exec(`rm -rf "${inputPath}"`);
            }
            else {
                yield ioUtil.unlink(inputPath);
            }
        }
    });
}
exports.rmRF = rmRF;
/**
 * Make a directory.  Creates the full path with folders in between
 * Will throw if it fails
 *
 * @param   fsPath        path to create
 * @returns Promise<void>
 */
function mkdirP(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        yield ioUtil.mkdirP(fsPath);
    });
}
exports.mkdirP = mkdirP;
/**
 * Returns path of a tool had the tool actually been invoked.  Resolves via paths.
 * If you check and the tool does not exist, it will throw.
 *
 * @param     tool              name of the tool
 * @param     check             whether to check if tool exists
 * @returns   Promise<string>   path to tool
 */
function which(tool, check) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // recursive when check=true
        if (check) {
            const result = yield which(tool, false);
            if (!result) {
                if (ioUtil.IS_WINDOWS) {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
                }
                else {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
                }
            }
        }
        try {
            // build the list of extensions to try
            const extensions = [];
            if (ioUtil.IS_WINDOWS && process.env.PATHEXT) {
                for (const extension of process.env.PATHEXT.split(path.delimiter)) {
                    if (extension) {
                        extensions.push(extension);
                    }
                }
            }
            // if it's rooted, return it if exists. otherwise return empty.
            if (ioUtil.isRooted(tool)) {
                const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
                if (filePath) {
                    return filePath;
                }
                return '';
            }
            // if any path separators, return empty
            if (tool.includes('/') || (ioUtil.IS_WINDOWS && tool.includes('\\'))) {
                return '';
            }
            // build the list of directories
            //
            // Note, technically "where" checks the current directory on Windows. From a toolkit perspective,
            // it feels like we should not do this. Checking the current directory seems like more of a use
            // case of a shell, and the which() function exposed by the toolkit should strive for consistency
            // across platforms.
            const directories = [];
            if (process.env.PATH) {
                for (const p of process.env.PATH.split(path.delimiter)) {
                    if (p) {
                        directories.push(p);
                    }
                }
            }
            // return the first match
            for (const directory of directories) {
                const filePath = yield ioUtil.tryGetExecutablePath(directory + path.sep + tool, extensions);
                if (filePath) {
                    return filePath;
                }
            }
            return '';
        }
        catch (err) {
            throw new Error(`which failed with message ${err.message}`);
        }
    });
}
exports.which = which;
function readCopyOptions(options) {
    const force = options.force == null ? true : options.force;
    const recursive = Boolean(options.recursive);
    return { force, recursive };
}
function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, void 0, void 0, function* () {
        // Ensure there is not a run away recursive copy
        if (currentDepth >= 255)
            return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
            const srcFile = `${sourceDir}/${fileName}`;
            const destFile = `${destDir}/${fileName}`;
            const srcFileStat = yield ioUtil.lstat(srcFile);
            if (srcFileStat.isDirectory()) {
                // Recurse
                yield cpDirRecursive(srcFile, destFile, currentDepth, force);
            }
            else {
                yield copyFile(srcFile, destFile, force);
            }
        }
        // Change the mode for the newly created directory
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    });
}
// Buffered file copy
function copyFile(srcFile, destFile, force) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
            // unlink/re-link it
            try {
                yield ioUtil.lstat(destFile);
                yield ioUtil.unlink(destFile);
            }
            catch (e) {
                // Try to override file permission
                if (e.code === 'EPERM') {
                    yield ioUtil.chmod(destFile, '0666');
                    yield ioUtil.unlink(destFile);
                }
                // other errors = it doesn't exist, no work to do
            }
            // Copy over symlink
            const symlinkFull = yield ioUtil.readlink(srcFile);
            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);
        }
        else if (!(yield ioUtil.exists(destFile)) || force) {
            yield ioUtil.copyFile(srcFile, destFile);
        }
    });
}
//# sourceMappingURL=io.js.map

/***/ }),

/***/ 357:
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ 129:
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ 614:
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ 747:
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ 87:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 622:
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ 669:
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	__webpack_require__.ab = __dirname + "/";/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(932);
/******/ })()
;
//# sourceMappingURL=index.js.map