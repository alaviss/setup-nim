on: [push, pull_request]

name: 'Test Github Actions'

jobs:
  test-native:
    strategy:
      fail-fast: false
      matrix:
        version: ['version-1-0', 'version-1-4', 'devel']
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        arch: ['', 'amd64', 'i386']
        customDir: ['', 'install-nim-here', 'dir with spaces']
        addPath: [true, false]
        exclude:
          - os: macos-latest
            arch: i386
        include:
          - os: windows-latest
            arch: ''
            mingw: x64
          - os: windows-latest
            arch: amd64
            mingw: x64
          - os: windows-latest
            arch: i386
            mingw: x32

    name: '${{ matrix.os }}(arch: ${{ matrix.arch }}, path: ${{ matrix.customDir }}, add-to-path: ${{ matrix.addPath }}, version: ${{ matrix.version }})'
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Actions
        uses: actions/checkout@v2

      - if: matrix.arch == 'i386' && runner.os == 'Linux'
        name: Setup 32bit compiler (Linux)
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
            --no-install-recommends -yq gcc-multilib g++-multilib
          mkdir -p ~/.config/nim
          nimcfg=$HOME/.config/nim/nim.cfg

          cat << EOF > ~/.config/nim/nim.cfg
          passC = "-m32"
          passL = "-m32"
          EOF

      - if: runner.os == 'Windows'
        name: Setup MinGW (Windows)
        uses: egor-tensin/setup-mingw@v1
        with:
          platform: ${{ matrix.mingw }}

      - if: matrix.customDir == ''
        name: Install Nim (default subdir)
        uses: ./
        with:
          architecture: ${{ matrix.arch }}
          add-to-path: ${{ matrix.addPath }}
          version: ${{ matrix.version }}

      - if: matrix.customDir != ''
        name: Install Nim (custom subdir)
        uses: ./
        with:
          architecture: ${{ matrix.arch }}
          path: ${{ matrix.customDir }}
          add-to-path: ${{ matrix.addPath }}
          version: ${{ matrix.version }}

      - if: matrix.addPath
        name: Verify installation in PATH
        run: nim -v

      - if: '! matrix.addPath'
        name: Verify installation not in PATH
        run: |
          if ! which nim >/dev/null 2>&1; then
            echo "Test passed!"
          else
            echo "Test failed!"
            exit 1
          fi

      - name: Verify installation version and whether it is in the correct folder
        run: |
          directory='${{ matrix.customDir }}'
          [[ -z "$directory" ]] && directory=nim
          nim=$directory/bin/nim
          if [[ -x "$nim" ]]; then
            echo "Nim is installed in the correct directory!"
          else
            echo "Error: Could not find the compiler."
            exit 1
          fi
          requestedVersion='${{ matrix.version }}'
          if [[ "$requestedVersion" == version-* ]]; then
            version=$(echo 'echo NimVersion; quit 0' | "$nim" secret --hints:off)
            versionPrefix=${requestedVersion#version-}
            versionPrefix=${requestedVersion/-/.}
            if [[ $version == $requestedVersion* ]]; then
              echo "The correct version was fetched"
            else
              echo "Error: Expected version prefix '$versionPrefix', but version '$version' was installed"
              exit 1
            fi
          fi

      - name: Check if the compiler works
        run: |
          cat << EOF > test.nim
          import strutils
          import sequtils
          import tables
          EOF

          nim=nim
          if ! ${{ matrix.addPath }}; then
            directory='${{ matrix.customDir }}'
            [[ -z "$directory" ]] && directory=nim
            nim="$directory/bin/nim"
          fi

          # Disable warnings to not trigger annotations
          "$nim" c --warnings:off test.nim

          # TODO: figure out how to automate the check instead of
          # verifying by hand.
          cat << EOF > test.nim
          {.warning: "Trigger annotations".}
          {.error: "This is not an error, but a test for annotations".}
          EOF

          "$nim" c test.nim || true

      # Until https://github.com/nim-lang/nimble/issues/866 is fixed
      # this test will have to be disabled for nim installed in a path
      # containing whitespaces.
      - if: matrix.addPath && ! contains(matrix.customDir, ' ')
        name: Check if nimble works
        run: |
          nimble install -y nimterop
          if ! command -v toast >/dev/null 2>&1; then
            echo "Error: could not find toast"
            exit 1
          else
            echo '`toast` found, test passed!'
          fi

      - if: runner.os == 'Windows' && matrix.addPath && ! contains(matrix.customDir, ' ')
        name: Check if PATH is correct for native Windows software
        shell: powershell
        run: |
          Get-Command "toast.cmd" -ErrorAction Stop | out-null
          Get-Command "nim.exe" -ErrorAction Stop | out-null
          Write-Host "Test passed"
